/*Dynamic Programming                                                                             */
/* d(i,j): the side length of the maximal square which take matrix(i,j) as it's bottom right.     */
/* d(i,j) = 0 if matrix(i,j) = '0';                                                               */
/* d(i,j) = 1 + min(d(i-1,j),d(i,j-1),d(i-1,j-1))  if matrix(i,j) = '1';                          */

class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int len1 = matrix.size();
        if(len1 == 0) return 0;
        int len2 = matrix[0].size(),i,j,length=0;
        vector<vector<int>> res(len1,vector<int>(len2,0));
        for(i=0;i<len1;i++){
            for(j=0;j<len2;j++){
                if(i==0 || j==0) {res[i][j] = matrix[i][j] - '0';}
                else{
                    if(matrix[i][j] == '0') {res[i][j] = 0;}
                    else {res[i][j] = 1;res[i][j] += min(min(res[i-1][j],res[i][j-1]),res[i-1][j-1]);}
                }
                length = max(length,res[i][j]);
            }
        }
        return length*length;
    }
};
