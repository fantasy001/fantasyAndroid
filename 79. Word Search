/*                                   Classic Backtracking probelms                                       */
/* Basic idea:                                                                                           */
/*     step 1: traverse board and find next start point with coordinate(i,j). Return false if fail;      */
/*     step 2: Base on start point p(i,j), search for next character.                                    */
/*             If succeed, set start point as the point we find then return to step 2;                   */
/*             If fail, back track to last step;                                                         */
/*             If we get the end of the word, return true;                                               */
/* Attention:
/* We need to skip the points we already traversed. If not, it will fail with inputs like ["aa"], "aaa". */
/* Therefore, we need to create another board with the same size and record the points we've visited.    */

class Solution {
public:
    bool try_search(int i, int j, vector<vector<char>>& board, vector<vector<char>>& v, string word){
        if(word.empty()) return true;
        if(i-1 >= 0 && board[i-1][j] == word[0] && v[i-1][j] != 1){
            v[i-1][j] = 1;
            if(try_search(i-1,j,board,v,word.substr(1,word.length()-1))) return true;
            v[i-1][j] = 0;
        }
        if(j-1 >= 0 && board[i][j-1] == word[0] && v[i][j-1] != 1){
            v[i][j-1] = 1;
            if(try_search(i,j-1,board,v,word.substr(1,word.length()-1))) return true;
            v[i][j-1] = 0;
        }
        if(i+1 < board.size() && board[i+1][j] == word[0] && v[i+1][j] != 1){
            v[i+1][j] = 1;
            if(try_search(i+1,j,board,v,word.substr(1,word.length()-1))) return true;
            v[i+1][j] = 0;
        }
        if(j+1 < board[0].size() && board[i][j+1] == word[0] && v[i][j+1] != 1){
            v[i][j+1] = 1;
            if(try_search(i,j+1,board,v,word.substr(1,word.length()-1))) return true;
            v[i][j+1] = 0;
        }
        return false;
    }
    bool exist(vector<vector<char>>& board, string word) {
        int i,j;
        if(board.size() == 0) return false;
        vector<vector<char>> v;
        v.resize(board.size(),vector<char>(board[0].size(),0));
        for(i=0;i<board.size();i++)
            for(j=0;j<board[0].size();j++){
                if(board[i][j] != word[0]) continue;
                else{
                    v[i][j] = 1;
                    if(try_search(i,j,board,v,word.substr(1,word.length()-1))) return true;
                    v[i][j] = 0;
                }
            }
        return false;
    }
};
