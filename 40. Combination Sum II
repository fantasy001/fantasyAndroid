class Solution {
private:
    set<vector<int>> s;
    vector<vector<int>> res;
public:
    void dfs_search(vector<int>& candidates, vector<int>& v, int start, int target){
        if(target == 0){
            s.insert(v);
            return;
        }
        if(start >= candidates.size() || target < 0) return;
        int i;
        for(i=start;i<candidates.size();i++){
            v.push_back(candidates[i]);
            dfs_search(candidates,v,i+1,target-candidates[i]);
            v.pop_back();
        }
        return;
    }
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int> v;
        sort(candidates.begin(),candidates.end());
        dfs_search(candidates,v,0,target);
        set<vector<int>>::iterator itr = s.begin();
        for(;itr!=s.end();itr++){
            res.push_back(*itr);
        }
        return res;
    }
};
