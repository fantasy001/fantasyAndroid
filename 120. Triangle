/*  Another DP problem, but this one uses bottom-up strategy.                                       */
/*  As for the space, we can just cover the original data structure, since we don't need the data   */
/*  we already traversed. Our aim is to get triangle[0][0]. In this way, we don't need extra space. */   
class Solution {
private:
    vector<int> res;
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int i,j;
        for(i=triangle.size()-2;i>=0;i--)
            for(j=0;j<=i;j++)
                triangle[i][j] += min(triangle[i+1][j],triangle[i+1][j+1]);
        return triangle[0][0];
    }
};
