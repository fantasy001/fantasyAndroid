/* There are only 2 possible ways to get to destination:                               */
/*      ---------                                                                      */        
/*     |    |  S |    but we need to consider the boundry situations:                  */
/*     |    |  | |    1. If the destination E is close to the top boundry,there's only */
/*      ---------        one path to it (from left cell).                              */
/*     |    |  v |    2. Similarly, if the destination E is close to the left boundry, */
/*     | S--|->E |       there's only one way to get it(from top cell)                 */
/*      ---------                                                                      */
class Solution {
private:
    int res[100][100];
public:
    int uniquePaths(int m, int n) {
        int i,j;
        res[0][0] = 1;               //base case
        for(i=0;i<m;i++){
            for(j=0;j<n;j++){
                if(i==0 && j==0) continue;
                if(i-1 < 0) res[i][j] = res[i][j-1];         //top boundry
                else if(j-1 < 0) res[i][j] = res[i-1][j];    //left boundry
                else res[i][j] = res[i-1][j] + res[i][j-1];  //normal situation
            }
        }
    return res[m-1][n-1];
    }
};
