/* Now the houses are in circle, which means the first house and the last house could not be stolen at the same time*/
/* Then we can apply the algorithm in House Robber. We need to run House Robber two times First time, we ignore the */
/* first house. Second time we ignore the last house. The result is the maximum of the two outputs.                 */

class Solution {
public:
    int rob(vector<int>& nums) {
        vector<int> res;
        int temp1=0,temp2=0,i;
        res.push_back(0);
        res.push_back(0);
        int len = nums.size();
        if(len == 1) return nums[0];
        for(i=0;i<len-1;i++){
            temp1 = max(res[res.size()-2]+nums[i],res.back());
            res.push_back(temp1);
        }
        res.clear();
        res.push_back(0);
        res.push_back(0);
        for(i=1;i<len;i++){
            temp2 = max(res[res.size()-2]+nums[i],res.back());
            res.push_back(temp2);
        }
        return max(temp1,temp2);
    }
};
