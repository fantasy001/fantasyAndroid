double findkth(int A[],int m,int B[],int n,int k){
    if(m > n) return findkth(B,n,A,m,k);
    int a = min(k/2,m);
    int b = k-a;
    if(m == 0) return B[k - 1];
    if(n == 0) return A[k - 1];
    if(k == 1) return min(A[0],B[0]);
    if(A[a-1] < B[b-1]) return findkth(A+a, m-a, B, n, k-a);
    if(A[a-1] > B[b-1]) return findkth(A, m, B+b, n-b, k-b);
    if(A[a-1] == B[b-1]) return A[a-1];
}
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        int* A = &nums1[0];
        int* B = &nums2[0];
        if((m+n)%2 == 0) {return (findkth(A,m,B,n,(m+n)/2) + findkth(A,m,B,n,(m+n)/2+1))/2;}
        else return findkth(A,m,B,n,(m+n)/2+1);
    }
};
