class TrieNode {
public:
    char val;
    bool is_word;
    TrieNode *childs[26];
    // Initialize your data structure here.
    TrieNode() {
        val = 0;
        is_word = false;
        memset(childs, 0x0, sizeof(TreeNode*)*26); 
    }
    TrieNode(char c) {
        val = c;
        is_word = false;
        memset(childs, 0x0, sizeof(TreeNode*)*26); 
    }
};

class Trie {
public:
    Trie() {
        root = new TrieNode();
    }

    // Inserts a word into the trie.
    void insert(string word) {
        int i;
        TrieNode *current = root,*newNode;
        for(i=0;i<word.length();i++){
            if(current->childs[word[i]-'a'] == 0) {
                newNode = new TrieNode(word[0]);
                current->childs[word[i]-'a'] = newNode;
            }
            current = current->childs[word[i]-'a'];
        }
        current->is_word = true;
    }

    // Returns if the word is in the trie.
    bool search(string word) {
        int i;
        if(word.length()==0) return true;
        TrieNode *current = root;
        for(i=0;i<word.length();i++){
            if(current->childs[word[i]-'a'] == 0) return false;
            current = current->childs[word[i]-'a'];
        }
        if(current->is_word) return true;
        return false;
    }

    // Returns if there is any word in the trie
    // that starts with the given prefix.
    bool startsWith(string prefix) {
        int i;
        if(prefix.length() == 0) return true;
        TrieNode *current = root;
        for(i=0;i<prefix.length();i++){
            if(current->childs[prefix[i]-'a'] == 0) return false;
            current = current->childs[prefix[i]-'a'];
        }
        return true;
    }

private:
    TrieNode* root;
};

// Your Trie object will be instantiated and called as such:
// Trie trie;
// trie.insert("somestring");
// trie.search("key");
