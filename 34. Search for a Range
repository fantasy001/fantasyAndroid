/* Since the input is an interger array, therefore we can get the start and end index by binary searching */
/* target1(target-1 < target1 < target) and target2(target < target2 < target+1).                         */

class Solution {
private:
    vector<int> res;
public:
    int binarySearch(int left,int right,vector<int>& nums,double target){
        while(left <= right){
            int mid = (left+right)/2;
            if(nums[mid] < target){
                left = mid + 1;
            }else{
                right = mid - 1;
            }
        }
        return left;
    }
    vector<int> searchRange(vector<int>& nums, int target) {
        int left = 0, right = nums.size()-1,start = 0, end = 0;
        double target1 = (double)target - 0.1, target2 = (double)target + 0.1;
        start = binarySearch(left,right,nums,target1);
        end   = binarySearch(left,right,nums,target2);
        if(start == end){
            start = -1;
            end   = 0;
        }
        res.push_back(start);
        res.push_back(end-1);
        return res;
    }
};
