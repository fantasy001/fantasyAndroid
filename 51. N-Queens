class Solution {
private:
    vector<vector<string>> res;
public:
    bool is_safe(int i, int j, int sz, vector<string>& v){     //check if coordinate(i,j) is safe
        int m,n;
        for(m=0;m<i;m++){                         //check if there's any queen in the vertical line
            if(v[m][j] == 'Q') return false;
        }
        for(m=i-1,n=j-1;m>=0&&n>=0;m--,n--){      //check if there's any queen in the diagonal line(top-left to bottom-right)
            if(v[m][n] == 'Q') return false;
        }
        for(m=i-1,n=j+1;m>=0&&n<sz;m--,n++){      //check if there's any queen in the diagonal line(top-right to bottom-left)
            if(v[m][n] == 'Q') return false;
        }
        return true;
    }
    void find_queen(int i, int n, vector<string>& v){
        if(i>=n){
            res.push_back(v);
            return;
        }
        int j;
        for(j=0;j<n;j++){
            if(is_safe(i,j,n,v)){
                v[i][j] = 'Q';
                find_queen(i+1,n,v);
                v[i][j] = '.';
            }
        }
        return;
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<string> v(n,string(n,'.'));
        find_queen(0,n,v);
        return res;
    }
};
